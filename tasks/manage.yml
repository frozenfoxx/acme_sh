---
- name: Check if cert has been created
  ansible.builtin.stat:
    path: "{{ acme_sh_dir }}/{{ acme_sh_first_subject }}/{{ acme_sh_first_subject }}.cer"
  register: cert

- name: Issue acme.sh certs via dns
  ansible.builtin.command: >-
    ./acme.sh --issue {{ subject_list }} -k {{ acme_sh_keylength }} --server {{ acme_sh_server }}
      --dns {{ acme_sh_dns_provider }} --dnssleep {{ acme_sh_dns_sleep }}
  args:
    chdir: "{{ acme_sh_dir }}"
  vars:
    subject_list: -d {{ acme_sh_subject_names | join(" -d ") }}
  environment: "{{ acme_sh_env }}"
  become: yes
  become_user: "{{ acme_sh_user }}"
  register: certs
  when: not cert.stat.exists

- name: Have certs.changed?
  debug:
    msg: Changed? {{ certs.changed }}

- name: Ensure public cert dir exists with correct permissions
  ansible.builtin.file:
    path: "{{ acme_sh_certs_public_dir }}"
    state: directory
    owner: root
    group: "{{ acme_sh_user }}"
    mode: 0775

- name: Ensure private cert dir exists with correct permissions
  ansible.builtin.file:
    path: "{{ acme_sh_certs_private_dir }}"
    state: directory
    owner: root
    group: "{{ acme_sh_user }}"
    mode: 0770

- name: Install certs
  ansible.builtin.command: >-
    ./acme.sh --install-cert -d {{ acme_sh_first_subject }}
      --key-file {{ acme_sh_cert_key_file }}
      --fullchain-file {{ acme_sh_cert_fullchain_file }}
      --ca-file {{ acme_sh_cert_ca_file }}
      --reloadcmd "sudo {{ acme_sh_reload_cmd if (cert is defined and cert.stat.exists) else acme_sh_restart_cmd }}"
      --debug
  args:
    chdir: "{{ acme_sh_dir }}"
  become: yes
  become_user: "{{ acme_sh_user }}"
  when: (certs is defined and certs.changed) or acme_sh_force_install
  tags:
    - acme_sh_cert_install
